//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KDSPModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KDSPEntities : DbContext
    {
        public KDSPEntities()
            : base("name=KDSPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MasterSheet> MasterSheets { get; set; }
        public virtual DbSet<PatientAppointment> PatientAppointments { get; set; }
        public virtual DbSet<PatientPaymentHistory> PatientPaymentHistories { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Therapist> Therapists { get; set; }
        public virtual DbSet<TherapistSchedule> TherapistSchedules { get; set; }
        public virtual DbSet<TherapyCharge> TherapyCharges { get; set; }
        public virtual DbSet<WaitingList> WaitingLists { get; set; }
        public virtual DbSet<HolidayCalendar> HolidayCalendars { get; set; }
    
        public virtual int usp_GenerateTherapistSchedule(Nullable<int> therapistId)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenerateTherapistSchedule", therapistIdParameter);
        }
    
        public virtual int usp_BookTherapistSchedule(string therapistName, Nullable<System.DateTime> scheduleDate, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> patientId, Nullable<int> sessionNumber)
        {
            var therapistNameParameter = therapistName != null ?
                new ObjectParameter("TherapistName", therapistName) :
                new ObjectParameter("TherapistName", typeof(string));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            var sessionNumberParameter = sessionNumber.HasValue ?
                new ObjectParameter("SessionNumber", sessionNumber) :
                new ObjectParameter("SessionNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_BookTherapistSchedule", therapistNameParameter, scheduleDateParameter, startTimeParameter, endTimeParameter, patientIdParameter, sessionNumberParameter);
        }
    
        public virtual int usp_ReceivePayment(Nullable<int> appId, string paymentstatus, Nullable<int> amount, string receiptNo)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            var paymentstatusParameter = paymentstatus != null ?
                new ObjectParameter("Paymentstatus", paymentstatus) :
                new ObjectParameter("Paymentstatus", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ReceivePayment", appIdParameter, paymentstatusParameter, amountParameter, receiptNoParameter);
        }
    }
}
